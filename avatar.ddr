RobotSystem avatar    
/*         
 * ==============================================================
 * avatar
 * FEATURE : A Robot is a QActor that can execute remote commands
 * FEATURE : A Robot is a QActor that can handle or react to events			
 * TO NOTE :    
 * ==============================================================
 */            
Event usercmd        : usercmd(X)    //from robot-part of WebGUI;  X=robotgui(CMD) CMD=s(low)
Event inputcmd       : usercmd(X)    //from input-part of WebGUI;  X=executeInput( do(G,M) )
Event local_inputcmd : usercmd(X)    //from actor GUI;  X=executeInput( CMD )
Event alarm          : alarm(X)      //from robot-part of WebGUI red buttons X=fire|obstacle or from actor GUI
Event sensordata     : sensordata(X) //from the (built.in) SensorObserver of a Robot  
Event obstacle       : obstacle(X)   //sensorTheory
  
Event androidsensor : sensorData(X) 	//generated by an Android device (project it.unibo.android.qa.sensors) 
Event click         : clicked    		//generated by an Android device (project it.unibo.android.qa.sensors)
   
  
Context ctxAndroidSensors ip [ host="localhost" port=8013 ] -standalone 
        
Context  ctxAvatar  ip [ host="localhost"  port=8070 ]    -g cyan	-httpserver
EventHandler evh for local_inputcmd, alarm , sensordata , androidsensor , click -print ; 

//QActor qasensorsource context ctxAndroidSensors {
//	Plan init normal
//		println("JUST A PLACE HOLDER : never here")   
//}              
Robot mymock QActor avatar context ctxAvatar   -g cyan  {                         
   	Plan init normal                
  		println("A robot performs the command move sent by the user via http GUI"  )  ; 
  		/*
  		 * An application theory must be written in the src/actorPackage 
  		 * and consulted by using its name without any prefix
  		 */  
  		solve consult("talkTheory.pl") time(0) onFailSwitchTo  prologFailure ; 
//  		switchToPlan testActions ;
//		forward qasensorsource -m info : info(1) ;
		println("forward done"  )  ;   
  		switchToPlan cmdDriven;         
 		println("ENDS" )    
  	Plan testActions     resumeLastPlan
  		println("ELAB fibo" );
 		solve fibo(28,V) time(7000)  onFailSwitchTo prologFailure react event alarm -> handleAlarm ;
 		[ ?? tout(X,Y)] switchToPlan stopTheRobot ;
  		[ !? goalResult(R)]  println(resultInputCmd(R)) 
 	Plan cmdDriven   resumeLastPlan           
		println("wait for a command " ) ;           
		sense time(600000) usercmd , inputcmd , local_inputcmd -> evalRobotCmd , evalInputCmd , evalInputCmd ;   
  		[ ?? tout(X,Y)] switchToPlan handleTout ;
       	repeatPlan 0   		
    Plan evalRobotCmd   resumeLastPlan      
   		printCurrentEvent ;
  		//solve actorOp(fibo(5,V)) time(0) ;//onFailSwitchTo  prologFailure ; 
  		onEvent usercmd :  usercmd( X ) ->  actorOp execCmdGui(X)   ; 
  		[ !? actorOpResult(R)]  println( resultRobotCmd(R) )   
    Plan evalInputCmd   resumeLastPlan  
   		printCurrentEvent ;   
//  		onEvent inputcmd :  usercmd( GOAL ) -> solve GOAL time(0) ; 	//DO NOT USE GOAL in input goals
  		onEvent inputcmd :  usercmd( GOAL ) -> solve GOAL time(30000) react event alarm -> handleAlarm; 	//DO NOT USE GOAL in input goals
//  		onEvent local_inputcmd :  usercmd( GOAL ) -> solve GOAL time(0) ; 	//DO NOT USE GOAL in input goals
  		/*
  		 * If the GOAL command is not a reactive action for alarm, an alarm event does not block it
  		 * since the react clause is related to the solve action and not to the GOAL
  		 */
  		onEvent local_inputcmd :  usercmd( GOAL ) -> solve GOAL time(30000) react event alarm -> handleAlarm; 	//DO NOT USE GOAL in input goals
  		[ !? result(R)]  println(resultInputCmd(R)) 
   
   	Plan stopTheRobot     
   		println("Stop the robot" )   ;
//   		robotForward speed(100) time(10)  
    		robotStop speed(100) time(0) 
//   		solve actorOp( execCmdGui(robotgui( h(low) ) ) ) time(0)
 	Plan prologFailure resumeLastPlan            
		println("Prolog goal FAILURE" )     
	Plan handleAlarm resumeLastPlan    
		println("handleAlarm" )       	  
	Plan handleTout resumeLastPlan    
		println("handleTout" )    

   	  
}     