/* Generated by AN DISI Unibo */ 
package it.unibo.avatar;
import alice.tuprolog.SolveInfo;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.iot.configurator.Configurator;
import it.unibo.iot.executors.baseRobot.IBaseRobot; 
import it.unibo.iot.models.sensorData.distance.IDistanceSensorData;
import it.unibo.iot.models.sensorData.impact.IImpactSensorData;
import it.unibo.iot.models.sensorData.line.ILineSensorData;
import it.unibo.iot.models.sensorData.magnetometer.IMagnetometerSensorData;
import it.unibo.iot.sensors.ISensor; 
import it.unibo.iot.sensors.ISensorObserver;
import it.unibo.iot.sensors.distanceSensor.DistanceSensor;
import it.unibo.iot.sensors.impactSensor.ImpactSensor;
import it.unibo.iot.sensors.lineSensor.LineSensor;
import it.unibo.iot.sensors.magnetometerSensor.MagnetometerSensor;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;

import it.unibo.baseEnv.basicFrame.EnvFrame;
import alice.tuprolog.SolveInfo;
import it.unibo.is.interfaces.IActivity;
import it.unibo.is.interfaces.IIntent;

class QaRobotActor extends it.unibo.qactor.robot.RobotActor{
	public QaRobotActor(
		String name, QActorContext ctx, String worldTheoryPath,
			IOutputEnvView outEnvView, String baserobot, String defaultPlan )  throws Exception{
		super(name, ctx, "./srcMore/it/unibo/avatar/plans.txt", worldTheoryPath,
		outEnvView, it.unibo.qactor.robot.RobotSysKb.setRobotBase(ctx, baserobot) , defaultPlan);
	}
}

public class AbstractAvatar extends QaRobotActor implements IActivity{ 
protected AsynchActionResult aar = null;
protected boolean actionResult = true;
protected alice.tuprolog.SolveInfo sol;
//protected IMsgQueue mysupport ;  //defined in QActor
protected String planFilePath    = null;
protected String terminationEvId = "default";
protected String parg="";
protected boolean bres=false;
protected IActorAction  action;

		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			EnvFrame env = new EnvFrame( "Env_avatar", java.awt.Color.cyan  , java.awt.Color.black );
			env.init();
			env.setSize(800,400);
			IOutputEnvView newOutEnvView = ((EnvFrame) env).getOutputEnvView();
			return newOutEnvView;
		}


	public AbstractAvatar(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ,String baserobot)  throws Exception{
		super(actorId, myCtx,  
		"./srcMore/it/unibo/avatar/WorldTheory.pl",
		setTheEnv( outEnvView ) ,baserobot , "init");		
		addInputPanel(80);
		addCmdPanels();	
		this.planFilePath = "./srcMore/it/unibo/avatar/plans.txt";
		//Plan interpretation is done in Prolog
		//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
 	}
protected void addInputPanel(int size){
	((EnvFrame) env).addInputPanel(size);			
}
protected void addCmdPanels(){
	((EnvFrame) env).addCmdPanel("input", new String[]{"INPUT"}, this);
	((EnvFrame) env).addCmdPanel("alarm", new String[]{"FIRE"}, this);
	((EnvFrame) env).addCmdPanel("help",  new String[]{"HELP"}, this);				
}
	@Override
	protected void doJob() throws Exception {
		String name  = getName().replace("_ctrl", "");
		mysupport = (IMsgQueue) QActorUtils.getQActor( name );
 		initSensorSystem();
		boolean res = init();
		//println(getName() + " doJob " + res );
	} 
	/* 
	* ------------------------------------------------------------
	* PLANS
	* ------------------------------------------------------------
	*/
    public boolean init() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "init";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"A robot performs the command move sent by the user via http GUI\" ";
    		println( temporaryStr );  
    		parg = "consult( \"talkTheory.pl\" )";
    		//REGENERATE AKKA
    		aar = solveGoalReactive(parg,0,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "init";
    			if( ! aar.getGoon() ) break;
    		} 			
    		temporaryStr = " \"forward done\" ";
    		println( temporaryStr );  
    		if( ! planUtils.switchToPlan("cmdDriven").getGoon() ) break;
    		temporaryStr = " \"ENDS\" ";
    		println( temporaryStr );  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=init WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean testActions() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "testActions";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"ELAB fibo\" ";
    		println( temporaryStr );  
    		parg = "fibo(28,V)";
    		//REGENERATE AKKA
    		aar = solveGoalReactive(parg,7000,"alarm","handleAlarm");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "testActions";
    			if( ! aar.getGoon() ) break;
    		} 			
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??tout(X,Y)" )) != null ){
    		if( ! planUtils.switchToPlan("stopTheRobot").getGoon() ) break;
    		}
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(R)" )) != null ){
    		temporaryStr = "resultInputCmd(R)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=testActions WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean cmdDriven() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "cmdDriven";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"wait for a command \" ";
    		println( temporaryStr );  
    		//senseEvent
    		timeoutval = 600000;
    		aar = planUtils.senseEvents( timeoutval,"usercmd,inputcmd,local_inputcmd","evalRobotCmd,evalInputCmd,evalInputCmd",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    			//break;
    		}
    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??tout(X,Y)" )) != null ){
    		if( ! planUtils.switchToPlan("handleTout").getGoon() ) break;
    		}
    		if( planUtils.repeatPlan(0).getGoon() ) continue;
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=cmdDriven WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean evalRobotCmd() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "evalRobotCmd";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		printCurrentEvent(false);
    		//onEvent
    		if( currentEvent.getEventId().equals("usercmd") ){
    		 		String parg = "actorOp(execCmdGui(X))";
    		 		parg =  updateVars( Term.createTerm("usercmd(X)"), Term.createTerm("usercmd(X)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 		if( parg != null ){
    		 				aar = solveGoalReactive(parg,3600000,"","");
    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		 				if( aar.getInterrupted() ){
    		 					curPlanInExec   = "evalRobotCmd";
    		 					if( ! aar.getGoon() ) break;
    		 				} 			
    		 		}
    		 }
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?actorOpResult(R)" )) != null ){
    		temporaryStr = "resultRobotCmd(R)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=evalRobotCmd WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean evalInputCmd() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "evalInputCmd";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		printCurrentEvent(false);
    		//onEvent
    		if( currentEvent.getEventId().equals("inputcmd") ){
    		 		String parg="GOAL";
    		 		parg =  updateVars( Term.createTerm("usercmd(X)"), Term.createTerm("usercmd(GOAL)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ) {
    		 			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"alarm",outEnvView,30000);
    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		 				if( aar.getInterrupted() ){
    		 					curPlanInExec   = "evalInputCmd";
    		 					if( ! aar.getGoon() ) break;
    		 				} 			
    		 				if( aar.getResult().equals("failure")){
    		 					if( ! aar.getGoon() ) break;
    		 				}else if( ! aar.getGoon() ) break;
    		 			}
    		 }
    		//onEvent
    		if( currentEvent.getEventId().equals("local_inputcmd") ){
    		 		String parg="GOAL";
    		 		parg =  updateVars( Term.createTerm("usercmd(X)"), Term.createTerm("usercmd(GOAL)"), 
    		 			    		  					Term.createTerm(currentEvent.getMsg()), parg);
    		 			if( parg != null ) {
    		 			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"alarm",outEnvView,30000);
    		 				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		 				if( aar.getInterrupted() ){
    		 					curPlanInExec   = "evalInputCmd";
    		 					if( ! aar.getGoon() ) break;
    		 				} 			
    		 				if( aar.getResult().equals("failure")){
    		 					if( ! aar.getGoon() ) break;
    		 				}else if( ! aar.getGoon() ) break;
    		 			}
    		 }
    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?result(R)" )) != null ){
    		temporaryStr = "resultInputCmd(R)";
    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
    		println( temporaryStr );  
    		}
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=evalInputCmd WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean stopTheRobot() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "stopTheRobot";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"Stop the robot\" ";
    		println( temporaryStr );  
    		//stop
    		if( ! execRobotMove("stopTheRobot","stop",100,0,0, "" , "") ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=stopTheRobot WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean prologFailure() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "prologFailure";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"Prolog goal FAILURE\" ";
    		println( temporaryStr );  
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=prologFailure WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleAlarm() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "handleAlarm";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"handleAlarm\" ";
    		println( temporaryStr );  
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleAlarm WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean handleTout() throws Exception{	//public to allow reflection
    try{
    	curPlanInExec =  "handleTout";
    	boolean returnValue = suspendWork;
    while(true){
    nPlanIter++;
    		temporaryStr = " \"handleTout\" ";
    		println( temporaryStr );  
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=handleTout WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    /* 
    * ------------------------------------------------------------
    * SENSORS
    * ------------------------------------------------------------
    */
    protected void initSensorSystem(){		
    	try {
    		String goal = "consult( \"./src/it/unibo/avatar/sensorTheory.pl\" )";
    		SolveInfo sol = QActorUtils.solveGoal( goal ,pengine );
    		if( ! sol.isSuccess() ){
    			//println( "avatar initSensorSystem attempt to load sensorTheory "  );
    			goal = "consult( \"./sensorTheory.pl\" )";
    			QActorUtils.solveGoal( pengine, goal  );
    			//println( "avatar initSensorSystem= "  +  aar.getResult() );
    		}
    		addSensorObservers();
    	} catch (Exception e) {
    		e.printStackTrace();
    	}
    }
    /*
    //COMPONENTS
     RobotComponent motorleft 
     RobotComponent motorright 
    Composed component motors
    */
    protected void addSensorObservers(){
    	for (ISensor<?> sensor : Configurator.getInstance().getSensors()) {
    		//println( "avatar sensor= "  + sensor.getDefStringRep() );
    		//println( "avatar sensor class= "  + sensor.getClass().getName() );
        	if( sensor instanceof DistanceSensor){
        		DistanceSensor sensorDistance  = (DistanceSensor) sensor;
        		ISensorObserver<IDistanceSensorData> obs = new SensorObserver<IDistanceSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorDistance.getDefStringRep() );
        		sensorDistance.addObserver(  obs  ) ;
        	}
        	if( sensor instanceof LineSensor){
        		LineSensor sensorLine = (LineSensor) sensor;
         		ISensorObserver<ILineSensorData> obs = new SensorObserver<ILineSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorLine.getDefStringRep() );
        		sensorLine.addObserver(  obs  ) ;
        	}
         	if( sensor instanceof MagnetometerSensor){
        		MagnetometerSensor sensorMagneto = (MagnetometerSensor) sensor;
         		ISensorObserver<IMagnetometerSensorData> obs = new SensorObserver<IMagnetometerSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorMagneto.getDefStringRep() );
        		sensorMagneto.addObserver(  obs  ) ;
        	}
    		if( sensor instanceof ImpactSensor){
    			ImpactSensor sensorImpact = (ImpactSensor) sensor;
    			ISensorObserver<IImpactSensorData> obs = new SensorObserver<IImpactSensorData>(this,outEnvView);
    	//		println( "avatar add observer to  "  + sensorMagneto.getDefStringRep() );
    			sensorImpact.addObserver(  obs  ) ;
    		}
    	}		
    }	
    
 
	/* 
	* ------------------------------------------------------------
	* APPLICATION ACTIONS
	* ------------------------------------------------------------
	*/
	/* 
	* ------------------------------------------------------------
	* QUEUE  
	* ------------------------------------------------------------
	*/
	    protected void getMsgFromInputQueue(){
//	    	println( " %%%% getMsgFromInputQueue" ); 
	    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
	    	this.currentMessage = msg;
	    }
	/* 
	* ------------------------------------------------------------
	* IACTIVITY (aactor with GUI)
	* ------------------------------------------------------------
	*/
	private String[] actions = new String[]{
	    	"println( STRING | TERM )", 
	    	"play('./audio/music_interlude20.wav'),20000,'alarm,obstacle', 'handleAlarm,handleObstacle'",
	"emit(EVID,EVCONTENT)  ",
	"move(MOVE,DURATION,ANGLE)  with MOVE=mf|mb|ml|mr|ms",
	"forward( DEST, MSGID, MSGCONTENTTERM)"
	    };
	    protected void doHelp(){
			println("  GOAL ");
			println("[ GUARD ], ACTION  ");
			println("[ GUARD ], ACTION, DURATION ");
			println("[ GUARD ], ACTION, DURATION, ENDEVENT");
			println("[ GUARD ], ACTION, DURATION, EVENTS, PLANS");
			println("Actions:");
			for( int i=0; i<actions.length; i++){
				println(" " + actions[i] );
			}
	    }
	@Override
	public void execAction(String cmd) {
		if( cmd.equals("HELP") ){
			doHelp();
			return;
		}
		if( cmd.equals("FIRE") ){
			emit("alarm", "alarm(fire)");
			return;
		}
		String input = env.readln();
		//input = "\""+input+"\"";
		input = it.unibo.qactors.web.GuiUiKb.buildCorrectPrologString(input);
		//println("input=" + input);
		try {
			Term.createTerm(input);
 			String eventMsg=it.unibo.qactors.web.QActorHttpServer.inputToEventMsg(input);
			//println("QActor eventMsg " + eventMsg);
			emit("local_"+it.unibo.qactors.web.GuiUiKb.inputCmd, eventMsg);
  		} catch (Exception e) {
	 		println("QActor input error " + e.getMessage());
		}
	}
 	
	@Override
	public void execAction() {}
	@Override
	public void execAction(IIntent input) {}
	@Override
	public String execActionWithAnswer(String cmd) {return null;}
  }

