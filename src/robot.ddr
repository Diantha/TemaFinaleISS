RobotSystem robot       

Event obstacle    : obstacle(X) /* From the user GUI and from the sensors on the wall */
Event alarm       : alarm       /* Emitted when distance from sensor is less than DMIN  */
Event usercmd     : usercmd(X)  /* From the user GUI (es. STOP command) */
           
Context ctxRobot ip [ host="localhost"  port=8070 ] -httpserver

EventHandler evh for usercmd, obstacle -print ;  
               
Robot nano0 QActor avatar context ctxAvatar  {  /* nano0 = nome file config */

   	Plan init normal
		switchToPlan config ;
		println( "Ready to start...") ;
		delay time(4000) ;  /* Aspetto 4 secondi prima che il robot parta */
		switchToPlan moveForward ;
		
		println( "ROBOT ENDS" )
		
	Plan config resumeLastPlan
		/* Se serve, carico una KB .pl o la definisco con Rules */
		/* Connessione a MQTT? */
		
 	Plan moveForward
		println( "Moving forward..." ) ;
		robotForward speed(40) time (20000) react event usercmd     -> checkCommand
												  or event alarm    -> takePhoto  /* Il robot è nel raggio d'azione di un sensore */
												  or event obstacle -> stopTheRobot
		
		repeatPlan
	
	Plan takePhoto
		switchToPlan stopRobot ;
		switchToPlan turnLeft ;
		switchToPlan blinkLed; 
		
	Plan blinkLed
		// ON
		delay(1000) ;
		// OFF
		repeatPlan
		
	Plan stopRobot
		println( "Robot stopped" ) ;
		robotStop speed(10) time(0)	
	
	
	Plan turnLeft resumeLastPlan  /* Nota: il robot continua a girarsi fino al timeout anche se gli arriva un evento */
		println( "Robot turned left" ) ;
		robotLeft speed(70) time (2000) react event usercmd -> checkCommand
											  or event obstacle -> stopTheRobot
		
	Plan turnRight resumeLastPlan  /* Nota: il robot continua a girarsi fino al timeout anche se gli arriva un evento */
		println( "Robot turned right" ) ;
		robotLeft speed(70) time (2000) react event usercmd -> checkCommand
											  or event obstacle -> stopTheRobot
	
	Plan handleSensorMessages
		/* Codice per la ricezione di messaggi dai sensori sul muro
		receiveTheMsg m(qualcosa)
		printCurrentMessage ;
		OnMsg command:x() -> println(*/
		
		repeatPlan
		
	Plan stopTheRobot resumeLastPlan    
   		println("Stop the robot" )   ;    
   		sound time(1500) file("./audio/tada2.wav");
  		robotStop speed(10) time(0)	 
		
	Plan prologFailure resumeLastPlan
		println( "Prolog goal failure" )	
		
	
		
	
	
 		//WARNING: THE MOVE CONTINUES (unitl timeout) AFTER A REACTION 
 	    robotLeft   speed(70)   time(2000 ) react 
 	                        event alarm -> stopTheRobot or event obstacle -> stopTheRobot ;      
 	    [ ?? tout(X,Y)] sound time(1500) file("./audio/illogical_most2.wav");
 	    robotRight  speed(70)   time(2000 ) react event alarm -> stopTheRobot or event obstacle -> stopTheRobot ;      
	    [ ?? tout(X,Y)] sound time(1500) file("./audio/illogical_most2.wav") 
 	Plan cmdDriven                         
		println("wait for a command  " ) ;           
		sense time(600000) usercmd ,  inputcmd -> continue ,  evalInputCmd ;  
   		[ !? tout(X,Y)] println(tout(X,Y)) ;      
  		[ ?? tout(600000,Y)] switchToPlan endJob ;     
  		printCurrentEvent ;
  		//The robot executes a command given with to a button
   		onEvent usercmd :  usercmd( CMD ) -> println(evalRobotCmd(CMD) ) ; 
  		onEvent usercmd :  usercmd( CMD ) ->  actorOp execCmdGui(CMD)  ; 
  						  //execCmdGui is defined in RobotActor, CmdUilInterpreter
  		[ !? actorOpDone(OP,R)]  println( actorOpDone(OP,R) ) ;	
  		repeatPlan
  	//The robot executes a command written as a string 
    Plan evalInputCmd   resumeLastPlan   
   		printCurrentEvent ;
  		println("evalInputCmd" ) ; 
  		onEvent inputcmd :  usercmd( CMD ) -> demo CMD   ; 
  		[ !? result(R)]  println(resultInputCmd(R)) 	
		
   	
		
 	

	Plan handleAlarm resumeLastPlan     
		println("handleAlarm" )       	      	  
}     