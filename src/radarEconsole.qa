/* 
 * ==============================================================
 * radargui.qa
 * ==============================================================
 */   
System radargui     
Event sonar : p( Distance, Angle  ) 
Event obstacle       : obstacle(X)   //from WebGUI red button X= near or from actor GUI
Event control        : control( CMD )	//CMD = stop | atpos | go | ready
Event usercmd        : usercmd(X)    //from robot-part of WebGUI;  X=robotgui(CMD) CMD=s(low)

Event local_inputcmd : usercmd(X)   //generated by cmd actor gui-interface
Event inputcmd       : usercmd(X) 	//generated by HTTP cmd user-interface
Event alarm          : alarm(X) 	//generated by HTTP cmd user-interface
Event endplay        : endplay(X)   //generated by a user play command



Dispatch polar    : p( Distance, Angle  )    

Context  ctxRadar    ip [ host="192.168.251.1"  port=8033 ] -g cyan -httpserver //192.168.251.1


EventHandler evh for sonar -print  {  //event => dispatch
	forwardEvent radargui -m polar  
	//forwardEvent controltfce16 -m polar
};  

EventHandler evh2 for alarm , obstacle , endplay -print ;

QActor radargui context ctxRadar  {	  	/*( R2 )*/  
	Plan init normal        
		println("RADAR init the GUI ... ") ;     
		actorOp activateGui ;
		switchToPlan doWorkMsgs      
	Plan doWorkMsgs 
 		println("RADAR receive") ;                      
		//receiveMsg time ( 30000000 )  ; 
		receiveMsg time ( 3000 )  ; 
		//printCurrentMessage ;
   		onMsg polar : p(DIST,THETA) -> actorOp sendDataToGui( DIST,THETA ) ;  
 		repeatPlan  
 }


QActor qacmdexecutor context ctxRadar  -g yellow  {      
  	Plan main normal   
 		println("=================================================="  )  ;
 		println("An actor that executes user commmands "  )  ;
 		println("=================================================="  )  ;
 		demo consult("./talkTheory.pl")  ;  
 		sound time(20000) file("./audio/music_interlude20.wav") react event alarm -> handleAlarm ;
 		switchToPlan handleInput 
	 
 	Plan handleInput
 		println("CIAO SONO DENTRO L'HANDLE INPUT"); 
  		sense time(600000)  local_inputcmd , inputcmd -> elabInputCmd ,   elabInputCmd ;  
	 	repeatPlan       	
	Plan elabInputCmd resumeLastPlan       
  		printCurrentEvent;  
    	onEvent  local_inputcmd : usercmd(CMD) -> demo CMD   ; //the action (CMD) itself is reactive  
 		onEvent  inputcmd       : usercmd(CMD) -> demo CMD     //the action (CMD) itself is reactive 
 	Plan handleAlarm resumeLastPlan     
 		println("handleAlarm done" ) ;     
 		sound time(2000) file("./audio/music_dramatic20.wav")  react event local_inputcmd -> handleInput
 	Plan handleObstacle resumeLastPlan         
		println("handleObstacle done" ) 
  	Plan prologFailure resumeLastPlan    
		println("failure in solving a Prolog goal" )   
 
 } 


