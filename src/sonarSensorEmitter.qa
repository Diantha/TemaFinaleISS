///* 
// * ==============================================================
// * sonarSensorEmitter.qa  Sonar subsystem
// * ==============================================================
// */
// 
//System sonarSensorEmitter   
//   
//Event sonarData : p( Distance, SID  )
// 
//Context ctxSensorEmitter ip [ host="localhost" port=8045 ]
//Context ctxRadar ip [ host="localhost" port=8010 ]
//
//QActor sensorsonar context ctxSensorEmitter {    
//
//	Rules {
//		onRaspberry.
//	}
//	/* First plan */
// 	Plan main normal
// 		println( "Main..." ) ;
// 		[ !? onRaspberry ] switchToPlan init
// 
// 	/* Starts the sonar subsystem */
// 	Plan init
// 		actorOp startSonarC ;
// 		println( "Valuto l'actorop in init" ) ;
// 		[ !? actorOpDone ] switchToPlan work
// 		
// 	/* Collects and emits data */
//	Plan work
//		println( "Valuto l'actorop in work" ) ;
//		actorOp getDistanceFromSonar ;
//		[ ?? actorOpDone(OP, R) ] emit sonarData : sonarData(R, ss);
//		println( "Ho valutato l'actorOp e sto mandando dati, in teoria" ) ;
//  		repeatPlan
//}   
   
System sonarSensorEmitter   
   
Event sonar : p( Distance, SID  )
Event numOfSonar : numOfSonar( N )  

Context ctxSensorEmitter ip [ host="localhost" port=8045 ] 
Context ctxRadar ip [ host="localhost" port=8010 ]

QActor sensorsonar context ctxSensorEmitter  {    
Rules{
	/* THESE RULES ARE WRITTEN IN THE WorldTheory of the sensorsonar */
	/* CONFIGURATION   */
		onRaspberry.  
		mysonar( s1, coloryellow, "192.168.251.118" ).	 
		//mysonar( s2, colorred, "192.168.251.121" ).		 
		//mysonar( s3, colorgreen, "192.168.251.120" ).	 		
	/* SIMULATION DATA */	   
   		p(80,1).p(70,1).p(60,1).p(50,3).p(40,3).p(30,3).p(20,2).p(40,2).p(60,2).p(80,2).
 	/* RULES */
		sonar(s1,1).
		sonar(s2,2).
 		sonar(s3,3).
		numOfSonars(N) :- bagof(sonar(S,P), sonar(S,P), SonarList), length(SonarList,N).	
		setmyposition  :-  
			numOfSonars(N),
			assert( numSonars( N ) ),
			mysonar( SONAR, _, _ ), sonar(SONAR,SID), 
			assert( position( SID ) ).		
		obstacledata( p(D,SID) ) :- 
			//numSonars( N ),
			actorOpDone( _,d(D) ), 	//set by actorOp getDistanceFromSonar (1)
			position(SID).
	}	  
 	Plan init normal     
 		println("sensorsonar STARTS")  ;
		//[ !? onRaspberry ] actorOp startSonarC ;
  		demo setmyposition ;	//depends on mysonar
 		[ !? position(POS) ] println( position(POS) );
 		[ !? numSonars(N) ]  println( numSonars(N) );
 		[ !? numSonars(N) ]  emit numOfSonar : numOfSonar(N) ;
 		switchToPlan workSimulate ;
  		println("sensorsonar workReal")  ; 
  		println("Sto per stampare una serie di valori");      
  		[ !? onRaspberry ] switchToPlan workReal
 	Plan workSimulate   resumeLastPlan  
 		println("Work simulate");
  	 	[ !? p(DIST, SID) ] println(p(Distance, SID)) ;//else endPlan  "bye" 	//p(D,SID) does not work
		[ ?? p(DIST, SID) ] emit sonar : p(Distance,SID) ;
		delay time(500) ;
		repeatPlan 10	 	
	Plan workReal 
		actorOp getDistanceFromSonar ;		//(1)
//		[ !? obstacledata( VAL )] println( uuuuu(VAL) ) ;
//		[ !? obstacledata( VAL )] emit sonar : VAL ;
		//println("prima di emit") ;
		delay time(500) ;
		println(p(Distance, SID)) ;
		emit sonar : p(Distance,SID) ;
  	 	[ !? p(Distance, SID) ] println(p(Distance, SID)) ;//else endPlan  "bye" 	//p(D,SID) does not work
		[ ?? p(Distance, SID) ] emit sonar : p(Distance,SID) ;
//		[ ?? actorOpDone(OP,R )] println(R)	;	//remove actorOpDone
  		repeatPlan
}


//QActor sensorsonar context ctxSensorEmitter  {    
//	Rules{
//		/* SIMULATION DATA */
//		//simulation.	
//		p(1,58).p(1,54).p(1,51).p(1,51).p(1,51).
//		p(1,54).p(1,58).p(1,64).p(1,71).p(1,78).
//		p(1,86).p(1,94).p(1,103).p(1,112).
//		p(1,121).p(1,11).p(1,139).p(1,149).p(1,158).
//
//		p(2,103,29).p(2,94,32).p(2,86,36).p(2,78,40).p(2,71,45).
//		p(2,64,51).p(2,58,59).p(2,54,68).p(2,51,79).p(2,86,90).
//		p(2,51,101).p(2,54,112).p(2,58,121).p(2,64,129).p(2,71,135).
//		p(2,78,140).p(2,86,144).p(2,94,148).p(2,103,151).
//
//		p(3,158).p(3,149).p(3,139).p(3,11).p(3,121).
//		p(3,112).p(3,103).p(3,94).p(3,86).p(3,78).
//		p(3,71).p(3,64).p(3,58).p(3,54).p(3,51).
//		p(3,139).p(3,51).p(3,54).p(3,58).	
//	}	  
// 	    
// 	Plan init normal     
// 		println("SONARS: Start");
// 		[ !? simulation ] switchToPlan workSimulate else switchToPlan work;
//  		println("SONARS: finish")      
// 	Plan workSimulate   resumeLastPlan
//  	 	[ !? p(1, D) ] println(p(1, D)); 
//		[ ?? p(1, D) ] emit sonar : p(1, D);
//		delay time(2000);
//		[ !? p(2, D) ] println(p(2, D)); 
//		[ ?? p(2, D) ] emit sonar : p(2, D);
//		delay time(2000);
//		[ !? p(3, D) ] println(p(3, D)) else endPlan "SONARS: bye"; 
//		[ ?? p(3, D) ] emit sonar : p(3, D);
//		delay time(2000);
//		repeatPlan 15	
//	Plan work resumeLastPlan
//		repeatPlan
//} 
