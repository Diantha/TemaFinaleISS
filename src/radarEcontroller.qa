
/* 
 * ==============================================================
 * radargui.qa
 * ==============================================================
 */   
System radargui     
Event sonar : p( Distance, SID  ) 
Event obstacle       : obstacle(X)   //from WebGUI red button X= near or from actor GUI
Event usercmd        : usercmd    //from robot-part of WebGUI;  X=robotgui(CMD) CMD=s(low)
Event numOfSonar : numOfSonar( N )  
Event stopRobot : stopRobot
Event stopAndTakePhoto : stopAndTakePhoto


Dispatch polar    : p( Distance, SID  )   //Distance, Angle 
Dispatch robotCommand : rc( Command )
Dispatch mqttmsg : mqttmsg


Context  ctxRadar    ip [ host="localhost"  port=8033 ] -httpserver //192.168.251.1
//Context  ctxRadar    ip [ host="192.168.251.1"  port=8033 ] -g green -httpserver
Context  ctxSensorEmitter  ip [ host="localhost"  port=8133 ] -standalone /*"localhost"*/

//EventHandler evh for sonar -print  {  //event => dispatch
//	forwardEvent radargui -m polar;  
//	forwardEvent controller -m polar
//};  


QActor radargui context ctxRadar -g green {	  	/*( R2 )*/  
	Plan init normal        
		println("RADAR init the GUI ... ") ;     
		actorOp activateGui ;
		switchToPlan doWorkMsgs      
	Plan doWorkMsgs 
 		println("RADAR receive") ;                      
		receiveMsg time ( 30000000 )  ; 
		//receiveMsg time ( 3000 )  ; 
		printCurrentMessage ;
   		onMsg polar : p(DIST ,SID ) -> actorOp sendDataToGui( DIST,THETA ) ;
 		repeatPlan  
 }


QActor controller context ctxRadar -g yellow {
	Plan init normal
	println("Start controller ");
	actorOp initialization;
	switchToPlan work
	
	 //setta tutti i vari parametri valori a 0

	
	Plan work 
	println("Sto aspettando un comando");
	receiveMsg time ( 30000000 ) react event usercmd ->checkCmd ;
	onMsg mqttmsg : mqttmsg -> actorOp retrieveAndSavePhoto ; //per la foto del robot
	onMsg polar : p( Distance , SID ) -> actorOp evaluateExpr(numOfSonars(N)); //per i sonar 
	[?? actorOpDone (OP ,"takePhoto")] switchToPlan moveToTakePhoto ; //se l'actor op del sonar mi dice che in pratica sono davanti ad un sonar
	[?? actorOpDone (OP ,"alarm")] switchToPlan alarmSound ;//se la valutazione dell'espressione 
	printCurrentMessage ;
	repeatPlan
	
	Plan checkCmd
	[?? actorOpDone (OP ,"restart")] switchToPlan init ; // se gli ritorna il comando star, ricomincia
	[?? actorOpDone (OP ,"stop")] switchToPlan stopTheRobot ;//stoppa il robot
	resumeLastPlan
	
	Plan stopTheRobot
	println("Stop the robot!!!");
	emit stopRobot: stopRobot ; //manda un messaggio al robot per dire di fermarsi
	resumeLastPlan
	
	Plan alarmSound
	println("An alarm sound is playing !!!");
	sound time (3000) file ("./audio/illogical_most2 .mp3");
	emit stopRobot: stopRobot ; //Il robot, come da requisiti dopo l'allarme si deve fermare
	resumeLastPlan
	
	Plan moveToTakePhoto  
	emit stopAndTakePhoto : stopAndTakePhoto ;
//	forward robot  -m robotCommand :rc( left );
//	forward robot  -m robotCommand :rc( blinkLedStart );
//	forward robot  -m robotCommand :rc( takePhoto );
//	forward robot  -m robotCommand :rc( right );
//	forward robot  -m robotCommand :rc( blinkLedStop );
//	forward robot  -m robotCommand :rc( goForward );
	resumeLastPlan
	
}