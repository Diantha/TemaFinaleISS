System agentprototype
/*
* ==============================================================
* agentprototype.qa in project it.unibo.actor.dynamic
* ==============================================================
*/
Dispatch info : info( X )

Context agentprototype ip [ host="localhost" port=8060 ] -g yellow
/*
* -----------------------------------------------
* An actor that receives and prints 2 messages
* acting as a prototype for dynamic creation
* (see agentcreation,qa)
* -----------------------------------------------
*/
QActor agentprototype context agentprototype -g green {
	Plan init normal
	[ !? actorobj(NAME) ] println( waits( NAME ) );
	receiveMsg time(300000) ;
	[ !? actorobj(NAME) ] onMsg info : info(X) -> replyToCaller -m info : info( reply(NAME, thanks(X)) ) ;
	printCurrentMessage ;
	repeatPlan 1
}
